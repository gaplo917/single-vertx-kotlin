buildscript {
    ext {
        kotlin_version = '1.2.10'
        vertx_version = '3.5.1'
    }

    repositories {
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'nu.studer:gradle-jooq-plugin:2.0.9'
    }
}

group 'io.vertx.example'
version '1.0-SNAPSHOT'

apply plugin: 'kotlin'
apply plugin: 'kotlin-kapt'
apply plugin: 'nu.studer.jooq'

repositories {
    mavenCentral()
}

dependencies {
    compile "io.vertx:vertx-core:$vertx_version"
    compile "io.vertx:vertx-web:$vertx_version"
    compile "io.vertx:vertx-lang-kotlin-coroutines:$vertx_version"

    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-runtime:$kotlin_version"

    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:0.22.3"

    // dependency injector
    compile 'com.github.salomonbrys.kodein:kodein:4.1.0'

    // JWT
    compile 'io.vertx:vertx-auth-jwt:3.5.1'

    // logging
    compile 'io.github.microutils:kotlin-logging:1.4.9'
    compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.10.0'

    // jooq
    compile 'org.jooq:jooq'
    compile 'mysql:mysql-connector-java:6.0.5'
    jooqRuntime 'mysql:mysql-connector-java:6.0.5'

    // typesafe config
    compile 'com.typesafe:config:1.3.2'

    testCompile 'io.kotlintest:kotlintest:2.0.7'

}

jooq {
    // install the schema using mysql cli
    // mysql -uroot < ./vertx_jooq.sql

    db(sourceSets.main) {
        jdbc {
            driver = 'com.mysql.jdbc.Driver'
            url = 'jdbc:mysql://localhost:3306/'
            user = 'root'
            password = ''
        }
        generator {
            name = 'org.jooq.util.DefaultGenerator'
            strategy {
                name = 'org.jooq.util.DefaultGeneratorStrategy'
            }
            database {
                name = 'org.jooq.util.mysql.MySQLDatabase'
                inputSchema = 'vertx_jooq'
            }
            generate {
                relations = true
                deprecated = false
                records = true
                immutablePojos = true
                fluentSetters = true
            }
            target {
                packageName = 'io.vertx.example.jooq'
            }
        }
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

kotlin {
    experimental {
        coroutines "enable"
    }
}

task run(type: JavaExec, dependsOn: classes) {
    main = 'io.vertx.example.MainKt'
    classpath = sourceSets.main.runtimeClasspath
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'single vertx kotlin',
                'Implementation-Version': version,
                'Main-Class': 'io.vertx.example.MainKt'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}
