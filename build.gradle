buildscript {
    ext {
        kotlin_version = '1.2.10'
        vertx_version = '3.5.1'
        protobufPluginVersion = '0.8.4'
        grpcVersion = '1.10.0'
        protocVersion = '3.5.1'
    }

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "com.google.protobuf:protobuf-gradle-plugin:$protobufPluginVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

group 'io.vertx.example'
version '1.0-SNAPSHOT'

apply plugin: 'kotlin'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.protobuf'

repositories {
    mavenCentral()
}

dependencies {
    compile "io.vertx:vertx-core:$vertx_version"
    compile "io.vertx:vertx-web:$vertx_version"
    compile "io.vertx:vertx-lang-kotlin-coroutines:$vertx_version"

    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-runtime:$kotlin_version"

    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:0.22.3"

    // GRPC
    compile "io.grpc:grpc-protobuf:$grpcVersion"
    compile "io.grpc:grpc-stub:$grpcVersion"

    // dependency injector
    compile 'com.github.salomonbrys.kodein:kodein:4.1.0'

    // KMongo
    compile 'org.litote.kmongo:kmongo-coroutine:3.6.2'

    // logging
    compile 'org.apache.logging.log4j:log4j-api:2.10.0'
    compile 'org.apache.logging.log4j:log4j-core:2.10.0'

    // JWT
    compile 'io.vertx:vertx-auth-jwt:3.5.1'

    testCompile 'io.kotlintest:kotlintest:2.0.7'

}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

kotlin {
    experimental {
        coroutines "enable"
    }
}

task run(type: JavaExec, dependsOn: classes) {
    main = 'io.vertx.example.MainKt'
    classpath = sourceSets.main.runtimeClasspath
}
sourceSets {

    main {
        java {
            srcDirs += "${protobuf.generatedFilesBaseDir}/main/java"
        }
    }

}
protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:$protocVersion"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:$grpcVersion"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {
                outputSubDir = 'java'
            }
        }
    }
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'single vertx kotlin',
                'Implementation-Version': version,
                'Main-Class': 'io.vertx.example.MainKt'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}
